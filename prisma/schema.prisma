generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum EnableState {
  Enable
  Disable
}

enum ContractType {
  FullTime
  PartTime
  Internship
  Temporary
  Freelance
}

enum CustomerType {
  Owner
  CM
  MainConstruction
  DesignerArchitect
  EndUser
  Dealer
}

enum PartnerType {
  CUSTOMER
  SUPPLIER
}

enum ProductType {
  RM // Raw Material
  FG // Finished Goods
  PK // Packaging
  SP // Spare Part
  AP // Asset/Product
}

enum ItemStatus {
  Available
  Allocated
  Picked
  Hold
  Scrap
}

enum MovementType {
  Inbound
  Outbound
  Relocate
  Adjust
  Return
}

enum BinStatus {
  Empty
  Partial
  Full
  Reserved
}

model Role {
  roleId       Int         @id @default(autoincrement())
  roleName     String
  roleStatus   EnableState @default(Enable)
  roleCreateBy Int
  roleCreateAt DateTime    @default(now()) @db.Timestamp(0)
  roleUpdateBy Int?
  roleUpdateAt DateTime?   @db.Timestamp(0)

  jobs UseJob[] @relation("UseJobToRole")

  createdBy User? @relation("RoleCreatedBy", fields: [roleCreateBy], references: [userId])
  updatedBy User? @relation("RoleUpdatedBy", fields: [roleUpdateBy], references: [userId])

  @@index([roleCreateBy])
  @@index([roleUpdateBy])
}

model Division {
  divisionId       Int         @id @default(autoincrement())
  divisionName     String
  divisionStatus   EnableState @default(Enable)
  divisionCreateBy Int
  divisionCreateAt DateTime    @default(now()) @db.Timestamp(0)
  divisionUpdateBy Int?
  divisionUpdateAt DateTime?   @db.Timestamp(0)

  departments Department[] @relation("DivisionToDepartment")
  positions   Position[]   @relation("DivisionToPosition")
  jobs        UseJob[]     @relation("UseJobToDivision")

  createdBy User? @relation("DivisionCreatedBy", fields: [divisionCreateBy], references: [userId])
  updatedBy User? @relation("DivisionUpdatedBy", fields: [divisionUpdateBy], references: [userId])

  @@index([divisionCreateBy])
  @@index([divisionUpdateBy])
}

model Department {
  departmentId         Int         @id @default(autoincrement())
  departmentDivisionId Int
  departmentName       String
  departmentStatus     EnableState @default(Enable)
  departmentCreateBy   Int
  departmentCreateAt   DateTime    @default(now()) @db.Timestamp(0)
  departmentUpdateBy   Int?
  departmentUpdateAt   DateTime?   @db.Timestamp(0)

  division  Division   @relation("DivisionToDepartment", fields: [departmentDivisionId], references: [divisionId])
  positions Position[] @relation("DepartmentToPosition")
  jobs      UseJob[]   @relation("UseJobToDepartment")

  createdBy User? @relation("DepartmentCreatedBy", fields: [departmentCreateBy], references: [userId])
  updatedBy User? @relation("DepartmentUpdatedBy", fields: [departmentUpdateBy], references: [userId])

  @@unique([departmentDivisionId, departmentName])
  @@index([departmentDivisionId])
  @@index([departmentCreateBy])
  @@index([departmentUpdateBy])
}

model Position {
  positionId           Int         @id @default(autoincrement())
  positionDivisionId   Int
  positionDepartmentId Int
  positionName         String
  positionStatus       EnableState @default(Enable)
  positionCreateBy     Int
  positionCreateAt     DateTime    @default(now()) @db.Timestamp(0)
  positionUpdateBy     Int?
  positionUpdateAt     DateTime?   @db.Timestamp(0)

  division   Division   @relation("DivisionToPosition", fields: [positionDivisionId], references: [divisionId])
  department Department @relation("DepartmentToPosition", fields: [positionDepartmentId], references: [departmentId])
  jobs       UseJob[]   @relation("UseJobToPosition")

  createdBy User? @relation("PositionCreatedBy", fields: [positionCreateBy], references: [userId])
  updatedBy User? @relation("PositionUpdatedBy", fields: [positionUpdateBy], references: [userId])

  @@unique([positionDivisionId, positionDepartmentId, positionName])
  @@index([positionDivisionId])
  @@index([positionDepartmentId])
  @@index([positionCreateBy])
  @@index([positionUpdateBy])
}

model User {
  userId        Int         @id @default(autoincrement())
  userFirstName String
  userLastName  String
  userPhone     String
  userEmail     String
  userPicture   String
  userStatus    EnableState @default(Enable)
  userCreateBy  Int
  userCreateAt  DateTime    @default(now()) @db.Timestamp(0)
  userUpdateBy  Int?
  userUpdateAt  DateTime?   @db.Timestamp(0)

  job         UseJob?  @relation("UseJobToUser")
  jobsCreated UseJob[] @relation("UseJobCreatedBy")
  jobsUpdated UseJob[] @relation("UseJobUpdatedBy")

  usersCreated User[] @relation("UserCreatedBy")
  usersUpdated User[] @relation("UserUpdatedBy")

  authAccounts UserAuth[] @relation("UserAuth")

  rolesCreated Role[] @relation("RoleCreatedBy")
  rolesUpdated Role[] @relation("RoleUpdatedBy")

  divisionsCreated Division[] @relation("DivisionCreatedBy")
  divisionsUpdated Division[] @relation("DivisionUpdatedBy")

  departmentsCreated Department[] @relation("DepartmentCreatedBy")
  departmentsUpdated Department[] @relation("DepartmentUpdatedBy")

  positionsCreated Position[] @relation("PositionCreatedBy")
  positionsUpdated Position[] @relation("PositionUpdatedBy")

  customerLeadersCreated CustomerLeader[] @relation("CustomerLeaderCreatedBy")
  customerLeadersUpdated CustomerLeader[] @relation("CustomerLeaderUpdatedBy")

  customersCreated Customer[] @relation("CustomerCreatedBy")
  customersUpdated Customer[] @relation("CustomerUpdatedBy")

  storesCreated Store[] @relation("StoreCreateBy")
  storesUpdated Store[] @relation("StoreUpdateBy")

  partnersCreated Partner[] @relation("PartnerCreateBy")
  partnersUpdated Partner[] @relation("PartnerUpdateBy")

  productsCreated Product[] @relation("ProductCreateBy")
  productsUpdated Product[] @relation("ProductUpdateBy")

  stockMovements StockMovement[] @relation("UserMovedStock")

  createdBy User? @relation("UserCreatedBy", fields: [userCreateBy], references: [userId])
  updatedBy User? @relation("UserUpdatedBy", fields: [userUpdateBy], references: [userId])

  UserLog UserLog[]

  @@index([userCreateBy])
  @@index([userUpdateBy])
}

model UserAuth {
  userAuthId         Int     @id @default(autoincrement())
  userAuthUserId     Int     @unique
  userAuthUsername   String  @unique
  userAuthPassword   String
  userAuthForceReset Boolean @default(true)

  userAuthResetToken  String?
  userAuthResetExpire DateTime?

  userAccount User @relation("UserAuth", fields: [userAuthUserId], references: [userId])
}

model UseJob {
  useJobId           Int          @id @default(autoincrement())
  useJobUserId       Int          @unique
  useJobDivisionId   Int
  useJobDepartmentId Int
  useJobPositionId   Int
  useJobRoleId       Int
  useJobStartDate    DateTime
  useJobEndDate      DateTime?
  useJobContractType ContractType
  useJobIsActive     Boolean      @default(true)
  useJobCreateBy     Int
  useJobCreateAt     DateTime     @default(now()) @db.Timestamp(0)
  useJobUpdateBy     Int?
  useJobUpdateAt     DateTime?    @db.Timestamp(0)

  user       User       @relation("UseJobToUser", fields: [useJobUserId], references: [userId])
  division   Division   @relation("UseJobToDivision", fields: [useJobDivisionId], references: [divisionId])
  department Department @relation("UseJobToDepartment", fields: [useJobDepartmentId], references: [departmentId])
  position   Position   @relation("UseJobToPosition", fields: [useJobPositionId], references: [positionId])
  role       Role       @relation("UseJobToRole", fields: [useJobRoleId], references: [roleId])
  createdBy  User       @relation("UseJobCreatedBy", fields: [useJobCreateBy], references: [userId])
  updatedBy  User?      @relation("UseJobUpdatedBy", fields: [useJobUpdateBy], references: [userId])

  @@index([useJobUserId])
  @@index([useJobDivisionId])
  @@index([useJobDepartmentId])
  @@index([useJobPositionId])
  @@index([useJobRoleId])
  @@index([useJobCreateBy])
  @@index([useJobUpdateBy])
}

model UserLog {
  userLogId Int       @id @default(autoincrement())
  userId    Int?
  username  String
  loginAt   DateTime  @default(now()) @db.Timestamp(0)
  logoutAt  DateTime?
  ipAddress String?
  userAgent String?
  success   Boolean
  message   String?

  user User? @relation(fields: [userId], references: [userId])

  @@index([userId])
  @@index([loginAt])
}

model Customer {
  customerId       Int          @id @default(autoincrement())
  customerTax      String
  customerName     String
  customerBranch   String
  customerAddress  String
  customerPhone    String
  customerType     CustomerType
  customerStatus   EnableState  @default(Enable)
  customerCreateBy Int
  customerCreateAt DateTime     @default(now()) @db.Timestamp(0)
  customerUpdateBy Int?
  customerUpdateAt DateTime?    @db.Timestamp(0)

  leaders   CustomerLeader[] @relation("CustomerToLeader")
  createdBy User?            @relation("CustomerCreatedBy", fields: [customerCreateBy], references: [userId])
  updatedBy User?            @relation("CustomerUpdatedBy", fields: [customerUpdateBy], references: [userId])

  @@index([customerCreateBy])
  @@index([customerUpdateBy])
}

model CustomerLeader {
  customerLeaderId              Int       @id @default(autoincrement())
  customerId                    Int
  customerLeaderName            String
  customerLeaderEmail           String
  customerLeaderPhone           String
  customerLeaderIsDecisionMaker Boolean   @default(false)
  customerLeaderCreateBy        Int
  customerLeaderCreateAt        DateTime  @default(now()) @db.Timestamp(0)
  customerLeaderUpdateBy        Int?
  customerLeaderUpdateAt        DateTime? @db.Timestamp(0)

  customer  Customer @relation("CustomerToLeader", fields: [customerId], references: [customerId])
  createdBy User     @relation("CustomerLeaderCreatedBy", fields: [customerLeaderCreateBy], references: [userId])
  updatedBy User?    @relation("CustomerLeaderUpdatedBy", fields: [customerLeaderUpdateBy], references: [userId])

  @@index([customerId])
  @@index([customerLeaderCreateBy])
  @@index([customerLeaderUpdateBy])
}

model Partner {
  partnerId       Int         @id @default(autoincrement())
  partnerName     String
  partnerTaxId    String
  partnerPhone    String
  partnerAddress  String
  partnerEmail    String
  partnerStatus   EnableState @default(Enable)
  partnerCreateBy Int
  partnerCreateAt DateTime    @default(now()) @db.Timestamp(0)
  partnerUpdateBy Int?
  partnerUpdateAt DateTime?   @db.Timestamp(0)

  createdBy User  @relation("PartnerCreateBy", fields: [partnerCreateBy], references: [userId])
  updatedBy User? @relation("PartnerUpdateBy", fields: [partnerUpdateBy], references: [userId])

  @@unique([partnerName, partnerTaxId])
  @@index([partnerCreateBy])
  @@index([partnerUpdateBy])
}

model Store {
  storeId          Int         @id @default(autoincrement())
  storeCode        String      @unique
  storeName        String
  storeLocation    String
  storeDescription String?
  storeStatus      EnableState @default(Enable)
  storeCreateBy    Int
  storeCreateAt    DateTime    @default(now()) @db.Timestamp(0)
  storeUpdateBy    Int?
  storeUpdateAt    DateTime?   @db.Timestamp(0)

  createdBy  User   @relation("StoreCreateBy", fields: [storeCreateBy], references: [userId])
  updatedBy  User?  @relation("StoreUpdateBy", fields: [storeUpdateBy], references: [userId])
  storeZones Zone[]

  @@index([storeCreateBy])
  @@index([storeUpdateBy])
}

model Zone {
  zoneId          Int         @id @default(autoincrement())
  zoneStoreId     Int
  zoneCode        String      @unique
  zoneName        String
  zoneDescription String?
  zoneStatus      EnableState @default(Enable)
  zoneCreateAt    DateTime    @default(now()) @db.Timestamp(0)
  zoneUpdateAt    DateTime?   @db.Timestamp(0)

  zoneStore  Store   @relation(fields: [zoneStoreId], references: [storeId])
  zoneAisles Aisle[]
}

model Aisle {
  aisleId       Int       @id @default(autoincrement())
  aisleZoneId   Int
  aisleCode     String    @unique
  aisleName     String
  aisleCreateAt DateTime  @default(now()) @db.Timestamp(0)
  aisleUpdateAt DateTime? @db.Timestamp(0)

  aisleZone  Zone   @relation(fields: [aisleZoneId], references: [zoneId])
  aisleRacks Rack[]
}

model Rack {
  rackId       Int       @id @default(autoincrement())
  rackAisleId  Int
  rackCode     String    @unique
  rackName     String
  rackCreateAt DateTime  @default(now()) @db.Timestamp(0)
  rackUpdateAt DateTime? @db.Timestamp(0)

  rackAisle  Aisle   @relation(fields: [rackAisleId], references: [aisleId])
  rackLevels Level[]
}

model Level {
  levelId       Int       @id @default(autoincrement())
  levelRackId   Int
  levelCode     String    @unique
  levelName     String
  levelCreateAt DateTime  @default(now()) @db.Timestamp(0)
  levelUpdateAt DateTime? @db.Timestamp(0)

  levelRack Rack  @relation(fields: [levelRackId], references: [rackId])
  levelBins Bin[]
}

model Bin {
  binId        Int       @id @default(autoincrement())
  binLevelId   Int
  binCode      String    @unique
  binRow       String
  binType      String
  binUsage     String
  binCapacity  Int
  binRfidTagId String?
  binStatus    BinStatus @default(Empty)
  binFillRate  Float     @default(0.0)
  binPosX      Float
  binPosY      Float
  binPosZ      Float
  binCreateAt  DateTime  @default(now()) @db.Timestamp(0)
  binUpdateAt  DateTime? @db.Timestamp(0)

  binLevel  Level           @relation(fields: [binLevelId], references: [levelId])
  binStocks Stock[]
  binItems  StockItem[]
  movements StockMovement[]
}

model Product {
  productId          Int         @id @default(autoincrement())
  productSKU         String      @unique
  productName        String
  productType        ProductType
  productUnit        String
  productDescription String?
  productStatus      EnableState @default(Enable)
  productCreateBy    Int
  productCreateAt    DateTime    @default(now()) @db.Timestamp(0)
  productUpdateBy    Int?
  productUpdateAt    DateTime?   @db.Timestamp(0)

  createdBy User  @relation("ProductCreateBy", fields: [productCreateBy], references: [userId])
  updatedBy User? @relation("ProductUpdateBy", fields: [productUpdateBy], references: [userId])

  productStocks Stock[]
  productItems  StockItem[]
  movements     StockMovement[]
}

model Stock {
  stockId        Int       @id @default(autoincrement())
  stockProductId Int
  stockBinId     Int
  stockQty       Int
  stockLot       String
  stockExpiry    DateTime?

  stockProduct Product     @relation(fields: [stockProductId], references: [productId])
  stockBin     Bin         @relation(fields: [stockBinId], references: [binId])
  stockItems   StockItem[] @relation("StockToItem")

  @@unique([stockProductId, stockBinId, stockLot, stockExpiry])
}

model StockItem {
  itemId        Int        @id @default(autoincrement())
  itemStockId   Int
  itemProductId Int
  itemBinId     Int
  itemRFIDTagId String     @unique
  itemSerialNo  String?
  itemLot       String
  itemExpiry    DateTime?
  itemStatus    ItemStatus @default(Available)
  itemCreateAt  DateTime   @default(now()) @db.Timestamp(0)
  itemUpdateAt  DateTime?  @db.Timestamp(0)

  itemProduct Product @relation(fields: [itemProductId], references: [productId])
  itemBin     Bin     @relation(fields: [itemBinId], references: [binId])
  itemStock   Stock   @relation("StockToItem", fields: [itemStockId], references: [stockId])
}

model StockMovement {
  movementId        Int          @id @default(autoincrement())
  movementType      MovementType
  movementProductId Int
  movementBinId     Int
  movementQty       Int
  movementLot       String
  movementExpiry    DateTime?
  movementRefNo     String?
  movementNote      String?
  movementBy        Int
  movementAt        DateTime     @default(now()) @db.Timestamp(0)

  movementProduct Product @relation(fields: [movementProductId], references: [productId])
  movementBin     Bin     @relation(fields: [movementBinId], references: [binId])
  movedBy         User    @relation("UserMovedStock", fields: [movementBy], references: [userId])
}
