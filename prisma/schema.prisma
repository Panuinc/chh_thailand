generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum EnableState {
  Enable
  Disable
}

enum ContractType {
  FullTime
  PartTime
  Internship
  Temporary
  Freelance
}

enum CustomerType {
  Owner
  CM
  MainConstruction
  DesignerArchitect
  EndUser
  Dealer
}

enum PartnerType {
  CUSTOMER
  SUPPLIER
}

enum ProductType {
  RM // Raw Material
  FG // Finished Goods
  PK // Packaging
  SP // Spare Part
  AP // Asset/Product
}

enum ItemStatus {
  Available
  Allocated
  Picked
  Hold
  Scrap
}

enum MovementType {
  Inbound
  Outbound
  Relocate
  Adjust
  Return
}

enum BinStatus {
  Empty
  Partial
  Full
  Reserved
}

model Role {
  roleId       Int         @id @default(autoincrement())
  roleName     String
  roleStatus   EnableState @default(Enable)
  roleCreateBy Int
  roleCreateAt DateTime    @default(now()) @db.Timestamp(0)
  roleUpdateBy Int?
  roleUpdateAt DateTime?   @db.Timestamp(0)

  jobs UseJob[] @relation("UseJobToRole")

  createdBy User? @relation("RoleCreatedBy", fields: [roleCreateBy], references: [userId])
  updatedBy User? @relation("RoleUpdatedBy", fields: [roleUpdateBy], references: [userId])

  @@index([roleCreateBy])
  @@index([roleUpdateBy])
}

model Division {
  divisionId       Int         @id @default(autoincrement())
  divisionName     String
  divisionStatus   EnableState @default(Enable)
  divisionCreateBy Int
  divisionCreateAt DateTime    @default(now()) @db.Timestamp(0)
  divisionUpdateBy Int?
  divisionUpdateAt DateTime?   @db.Timestamp(0)

  departments Department[] @relation("DivisionToDepartment")
  positions   Position[]   @relation("DivisionToPosition")
  jobs        UseJob[]     @relation("UseJobToDivision")

  createdBy User? @relation("DivisionCreatedBy", fields: [divisionCreateBy], references: [userId])
  updatedBy User? @relation("DivisionUpdatedBy", fields: [divisionUpdateBy], references: [userId])

  @@index([divisionCreateBy])
  @@index([divisionUpdateBy])
}

model Department {
  departmentId         Int         @id @default(autoincrement())
  departmentDivisionId Int
  departmentName       String
  departmentStatus     EnableState @default(Enable)
  departmentCreateBy   Int
  departmentCreateAt   DateTime    @default(now()) @db.Timestamp(0)
  departmentUpdateBy   Int?
  departmentUpdateAt   DateTime?   @db.Timestamp(0)

  division  Division   @relation("DivisionToDepartment", fields: [departmentDivisionId], references: [divisionId])
  positions Position[] @relation("DepartmentToPosition")
  jobs      UseJob[]   @relation("UseJobToDepartment")

  createdBy User? @relation("DepartmentCreatedBy", fields: [departmentCreateBy], references: [userId])
  updatedBy User? @relation("DepartmentUpdatedBy", fields: [departmentUpdateBy], references: [userId])

  @@unique([departmentDivisionId, departmentName])
  @@index([departmentDivisionId])
  @@index([departmentCreateBy])
  @@index([departmentUpdateBy])
}

model Position {
  positionId           Int         @id @default(autoincrement())
  positionDivisionId   Int
  positionDepartmentId Int
  positionName         String
  positionStatus       EnableState @default(Enable)
  positionCreateBy     Int
  positionCreateAt     DateTime    @default(now()) @db.Timestamp(0)
  positionUpdateBy     Int?
  positionUpdateAt     DateTime?   @db.Timestamp(0)

  division   Division   @relation("DivisionToPosition", fields: [positionDivisionId], references: [divisionId])
  department Department @relation("DepartmentToPosition", fields: [positionDepartmentId], references: [departmentId])
  jobs       UseJob[]   @relation("UseJobToPosition")

  createdBy User? @relation("PositionCreatedBy", fields: [positionCreateBy], references: [userId])
  updatedBy User? @relation("PositionUpdatedBy", fields: [positionUpdateBy], references: [userId])

  @@unique([positionDivisionId, positionDepartmentId, positionName])
  @@index([positionDivisionId])
  @@index([positionDepartmentId])
  @@index([positionCreateBy])
  @@index([positionUpdateBy])
}

model User {
  userId        Int         @id @default(autoincrement())
  userFirstName String
  userLastName  String
  userPhone     String
  userEmail     String
  userPicture   String
  userStatus    EnableState @default(Enable)
  userCreateBy  Int
  userCreateAt  DateTime    @default(now()) @db.Timestamp(0)
  userUpdateBy  Int?
  userUpdateAt  DateTime?   @db.Timestamp(0)

  job         UseJob?  @relation("UseJobToUser")
  jobsCreated UseJob[] @relation("UseJobCreatedBy")
  jobsUpdated UseJob[] @relation("UseJobUpdatedBy")

  usersCreated User[] @relation("UserCreatedBy")
  usersUpdated User[] @relation("UserUpdatedBy")

  authAccounts UserAuth[] @relation("UserAuth")

  rolesCreated Role[] @relation("RoleCreatedBy")
  rolesUpdated Role[] @relation("RoleUpdatedBy")

  divisionsCreated Division[] @relation("DivisionCreatedBy")
  divisionsUpdated Division[] @relation("DivisionUpdatedBy")

  departmentsCreated Department[] @relation("DepartmentCreatedBy")
  departmentsUpdated Department[] @relation("DepartmentUpdatedBy")

  positionsCreated Position[] @relation("PositionCreatedBy")
  positionsUpdated Position[] @relation("PositionUpdatedBy")

  customerLeadersCreated CustomerLeader[] @relation("CustomerLeaderCreatedBy")
  customerLeadersUpdated CustomerLeader[] @relation("CustomerLeaderUpdatedBy")

  customersCreated Customer[] @relation("CustomerCreatedBy")
  customersUpdated Customer[] @relation("CustomerUpdatedBy")

  storesCreated Store[] @relation("StoreCreatedBy")
  storesUpdated Store[] @relation("StoreUpdatedBy")

  zonesCreated Zone[] @relation("ZoneCreatedBy")
  zonesUpdated Zone[] @relation("ZoneUpdatedBy")

  aislesCreated Aisle[] @relation("AisleCreatedBy")
  aislesUpdated Aisle[] @relation("AisleUpdatedBy")

  racksCreated Rack[] @relation("RackCreatedBy")
  racksUpdated Rack[] @relation("RackUpdatedBy")

  levelsCreated Level[] @relation("LevelCreatedBy")
  levelsUpdated Level[] @relation("LevelUpdatedBy")

  binsCreated Bin[] @relation("BinCreatedBy")
  binsUpdated Bin[] @relation("BinUpdatedBy")

  partnersCreated Partner[] @relation("PartnerCreateBy")
  partnersUpdated Partner[] @relation("PartnerUpdateBy")

  // productsCreated Product[] @relation("ProductCreateBy")
  // productsUpdated Product[] @relation("ProductUpdateBy")

  // stockMovements StockMovement[] @relation("UserMovedStock")

  createdBy User? @relation("UserCreatedBy", fields: [userCreateBy], references: [userId])
  updatedBy User? @relation("UserUpdatedBy", fields: [userUpdateBy], references: [userId])

  UserLog UserLog[]

  @@index([userCreateBy])
  @@index([userUpdateBy])
}

model UserAuth {
  userAuthId         Int     @id @default(autoincrement())
  userAuthUserId     Int     @unique
  userAuthUsername   String  @unique
  userAuthPassword   String
  userAuthForceReset Boolean @default(true)

  userAuthResetToken  String?
  userAuthResetExpire DateTime?

  userAccount User @relation("UserAuth", fields: [userAuthUserId], references: [userId])
}

model UseJob {
  useJobId           Int          @id @default(autoincrement())
  useJobUserId       Int          @unique
  useJobDivisionId   Int
  useJobDepartmentId Int
  useJobPositionId   Int
  useJobRoleId       Int
  useJobStartDate    DateTime
  useJobEndDate      DateTime?
  useJobContractType ContractType
  useJobIsActive     Boolean      @default(true)
  useJobCreateBy     Int
  useJobCreateAt     DateTime     @default(now()) @db.Timestamp(0)
  useJobUpdateBy     Int?
  useJobUpdateAt     DateTime?    @db.Timestamp(0)

  user       User       @relation("UseJobToUser", fields: [useJobUserId], references: [userId])
  division   Division   @relation("UseJobToDivision", fields: [useJobDivisionId], references: [divisionId])
  department Department @relation("UseJobToDepartment", fields: [useJobDepartmentId], references: [departmentId])
  position   Position   @relation("UseJobToPosition", fields: [useJobPositionId], references: [positionId])
  role       Role       @relation("UseJobToRole", fields: [useJobRoleId], references: [roleId])
  createdBy  User       @relation("UseJobCreatedBy", fields: [useJobCreateBy], references: [userId])
  updatedBy  User?      @relation("UseJobUpdatedBy", fields: [useJobUpdateBy], references: [userId])

  @@index([useJobUserId])
  @@index([useJobDivisionId])
  @@index([useJobDepartmentId])
  @@index([useJobPositionId])
  @@index([useJobRoleId])
  @@index([useJobCreateBy])
  @@index([useJobUpdateBy])
}

model UserLog {
  userLogId Int       @id @default(autoincrement())
  userId    Int?
  username  String
  loginAt   DateTime  @default(now()) @db.Timestamp(0)
  logoutAt  DateTime?
  ipAddress String?
  userAgent String?
  success   Boolean
  message   String?

  user User? @relation(fields: [userId], references: [userId])

  @@index([userId])
  @@index([loginAt])
}

model Customer {
  customerId       Int          @id @default(autoincrement())
  customerTax      String
  customerName     String
  customerBranch   String
  customerAddress  String
  customerPhone    String
  customerType     CustomerType
  customerStatus   EnableState  @default(Enable)
  customerCreateBy Int
  customerCreateAt DateTime     @default(now()) @db.Timestamp(0)
  customerUpdateBy Int?
  customerUpdateAt DateTime?    @db.Timestamp(0)

  leaders   CustomerLeader[] @relation("CustomerToLeader")
  createdBy User?            @relation("CustomerCreatedBy", fields: [customerCreateBy], references: [userId])
  updatedBy User?            @relation("CustomerUpdatedBy", fields: [customerUpdateBy], references: [userId])

  @@index([customerCreateBy])
  @@index([customerUpdateBy])
}

model CustomerLeader {
  customerLeaderId              Int       @id @default(autoincrement())
  customerId                    Int
  customerLeaderName            String
  customerLeaderEmail           String
  customerLeaderPhone           String
  customerLeaderIsDecisionMaker Boolean   @default(false)
  customerLeaderCreateBy        Int
  customerLeaderCreateAt        DateTime  @default(now()) @db.Timestamp(0)
  customerLeaderUpdateBy        Int?
  customerLeaderUpdateAt        DateTime? @db.Timestamp(0)

  customer  Customer @relation("CustomerToLeader", fields: [customerId], references: [customerId])
  createdBy User     @relation("CustomerLeaderCreatedBy", fields: [customerLeaderCreateBy], references: [userId])
  updatedBy User?    @relation("CustomerLeaderUpdatedBy", fields: [customerLeaderUpdateBy], references: [userId])

  @@index([customerId])
  @@index([customerLeaderCreateBy])
  @@index([customerLeaderUpdateBy])
}

model Partner {
  partnerId       Int         @id @default(autoincrement())
  partnerName     String
  partnerTaxId    String
  partnerPhone    String
  partnerAddress  String
  partnerEmail    String
  partnerStatus   EnableState @default(Enable)
  partnerCreateBy Int
  partnerCreateAt DateTime    @default(now()) @db.Timestamp(0)
  partnerUpdateBy Int?
  partnerUpdateAt DateTime?   @db.Timestamp(0)

  createdBy User  @relation("PartnerCreateBy", fields: [partnerCreateBy], references: [userId])
  updatedBy User? @relation("PartnerUpdateBy", fields: [partnerUpdateBy], references: [userId])

  @@unique([partnerName, partnerTaxId])
  @@index([partnerCreateBy])
  @@index([partnerUpdateBy])
}

model Store {
  storeId          Int         @id @default(autoincrement())
  storeCode        String      @unique
  storeName        String
  storeLocation    String
  storeDescription String
  storeStatus      EnableState @default(Enable)
  storeCreateBy    Int
  storeCreateAt    DateTime    @default(now()) @db.Timestamp(0)
  storeUpdateBy    Int?
  storeUpdateAt    DateTime?   @db.Timestamp(0)

  storeZones  Zone[]  @relation("StoreToZone")
  storeAisles Aisle[] @relation("StoreToAisle")
  storeRacks  Rack[]  @relation("StoreToRack")
  storeLevels Level[] @relation("StoreToLevel")
  storeBins   Bin[]   @relation("StoreToBin")

  createdBy User? @relation("StoreCreatedBy", fields: [storeCreateBy], references: [userId])
  updatedBy User? @relation("StoreUpdatedBy", fields: [storeUpdateBy], references: [userId])

  @@index([storeCreateBy])
  @@index([storeUpdateBy])
}

model Zone {
  zoneId          Int         @id @default(autoincrement())
  zoneStoreId     Int
  zoneCode        String      @unique
  zoneName        String
  zoneDescription String
  zoneStatus      EnableState @default(Enable)
  zoneCreateBy    Int
  zoneCreateAt    DateTime    @default(now()) @db.Timestamp(0)
  zoneUpdateBy    Int?
  zoneUpdateAt    DateTime?   @db.Timestamp(0)

  zoneStore Store @relation("StoreToZone", fields: [zoneStoreId], references: [storeId])

  zoneAisles Aisle[] @relation("ZoneToAisle")
  zoneRacks  Rack[]  @relation("ZoneToRack")
  zoneLevels Level[] @relation("ZoneToLevel")
  zoneBins   Bin[]   @relation("ZoneToBin")

  createdBy User? @relation("ZoneCreatedBy", fields: [zoneCreateBy], references: [userId])
  updatedBy User? @relation("ZoneUpdatedBy", fields: [zoneUpdateBy], references: [userId])

  @@unique([zoneStoreId, zoneName])
  @@index([zoneStoreId])
  @@index([zoneCreateBy])
  @@index([zoneUpdateBy])
}

model Aisle {
  aisleId          Int       @id @default(autoincrement())
  aisleStoreId     Int
  aisleZoneId      Int
  aisleCode        String    @unique
  aisleName        String
  aisleDescription String
  aisleCreateBy    Int
  aisleCreateAt    DateTime  @default(now()) @db.Timestamp(0)
  aisleUpdateBy    Int?
  aisleUpdateAt    DateTime? @db.Timestamp(0)

  aisleStore Store @relation("StoreToAisle", fields: [aisleStoreId], references: [storeId])
  aisleZone  Zone  @relation("ZoneToAisle", fields: [aisleZoneId], references: [zoneId])

  aisleRacks  Rack[]  @relation("AisleToRack")
  aisleLevels Level[] @relation("AisleToLevel")
  aisleBins   Bin[]   @relation("AisleToBin")

  createdBy User? @relation("AisleCreatedBy", fields: [aisleCreateBy], references: [userId])
  updatedBy User? @relation("AisleUpdatedBy", fields: [aisleUpdateBy], references: [userId])

  @@unique([aisleZoneId, aisleName])
  @@index([aisleStoreId])
  @@index([aisleZoneId])
  @@index([aisleCreateBy])
  @@index([aisleUpdateBy])
}

model Rack {
  rackId          Int       @id @default(autoincrement())
  rackStoreId     Int
  rackZoneId      Int
  rackAisleId     Int
  rackCode        String    @unique
  rackName        String
  rackDescription String
  rackCreateBy    Int
  rackCreateAt    DateTime  @default(now()) @db.Timestamp(0)
  rackUpdateBy    Int?
  rackUpdateAt    DateTime? @db.Timestamp(0)

  rackStore Store @relation("StoreToRack", fields: [rackStoreId], references: [storeId])
  rackZone  Zone  @relation("ZoneToRack", fields: [rackZoneId], references: [zoneId])
  rackAisle Aisle @relation("AisleToRack", fields: [rackAisleId], references: [aisleId])

  rackLevels Level[] @relation("RackToLevel")
  rackBins   Bin[]   @relation("RackToBin")

  createdBy User? @relation("RackCreatedBy", fields: [rackCreateBy], references: [userId])
  updatedBy User? @relation("RackUpdatedBy", fields: [rackUpdateBy], references: [userId])

  @@unique([rackAisleId, rackName])
  @@index([rackStoreId])
  @@index([rackZoneId])
  @@index([rackAisleId])
  @@index([rackCreateBy])
  @@index([rackUpdateBy])
}

model Level {
  levelId          Int       @id @default(autoincrement())
  levelStoreId     Int
  levelZoneId      Int
  levelAisleId     Int
  levelRackId      Int
  levelCode        String    @unique
  levelName        String
  levelDescription String
  levelCreateBy    Int
  levelCreateAt    DateTime  @default(now()) @db.Timestamp(0)
  levelUpdateBy    Int?
  levelUpdateAt    DateTime? @db.Timestamp(0)

  levelStore Store @relation("StoreToLevel", fields: [levelStoreId], references: [storeId])
  levelZone  Zone  @relation("ZoneToLevel", fields: [levelZoneId], references: [zoneId])
  levelAisle Aisle @relation("AisleToLevel", fields: [levelAisleId], references: [aisleId])
  levelRack  Rack  @relation("RackToLevel", fields: [levelRackId], references: [rackId])

  levelBins Bin[] @relation("LevelToBin")

  createdBy User? @relation("LevelCreatedBy", fields: [levelCreateBy], references: [userId])
  updatedBy User? @relation("LevelUpdatedBy", fields: [levelUpdateBy], references: [userId])

  @@unique([levelRackId, levelName])
  @@index([levelStoreId])
  @@index([levelZoneId])
  @@index([levelAisleId])
  @@index([levelRackId])
  @@index([levelCreateBy])
  @@index([levelUpdateBy])
}

model Bin {
  binId          Int       @id @default(autoincrement())
  binStoreId     Int
  binZoneId      Int
  binAisleId     Int
  binRackId      Int
  binLevelId     Int
  binCode        String    @unique
  binDescription String
  binRow         String
  binType        String
  binUsage       String
  binCapacity    Int
  binRfidTagId   String
  binStatus      BinStatus @default(Empty)
  binFillRate    Float     @default(0.0)
  binPosX        Float
  binPosY        Float
  binPosZ        Float
  binRotationX   Float     @default(0.0)
  binRotationY   Float     @default(0.0)
  binRotationZ   Float     @default(0.0)
  binWidth       Float
  binHeight      Float
  binDepth       Float
  binCreateBy    Int
  binCreateAt    DateTime  @default(now()) @db.Timestamp(0)
  binUpdateBy    Int?
  binUpdateAt    DateTime? @db.Timestamp(0)

  binStore Store @relation("StoreToBin", fields: [binStoreId], references: [storeId])
  binZone  Zone  @relation("ZoneToBin", fields: [binZoneId], references: [zoneId])
  binAisle Aisle @relation("AisleToBin", fields: [binAisleId], references: [aisleId])
  binRack  Rack  @relation("RackToBin", fields: [binRackId], references: [rackId])
  binLevel Level @relation("LevelToBin", fields: [binLevelId], references: [levelId])

  createdBy User? @relation("BinCreatedBy", fields: [binCreateBy], references: [userId])
  updatedBy User? @relation("BinUpdatedBy", fields: [binUpdateBy], references: [userId])

  @@unique([binLevelId, binCode])
  @@index([binStoreId])
  @@index([binZoneId])
  @@index([binAisleId])
  @@index([binRackId])
  @@index([binLevelId])
  @@index([binCreateBy])
  @@index([binUpdateBy])
}

// model Product {
//   productId          Int         @id @default(autoincrement())
//   productSKU         String      @unique
//   productName        String
//   productType        ProductType
//   productUnit        String
//   productDescription String?
//   productStatus      EnableState @default(Enable)
//   productCreateBy    Int
//   productCreateAt    DateTime    @default(now()) @db.Timestamp(0)
//   productUpdateBy    Int?
//   productUpdateAt    DateTime?   @db.Timestamp(0)

//   createdBy User  @relation("ProductCreateBy", fields: [productCreateBy], references: [userId])
//   updatedBy User? @relation("ProductUpdateBy", fields: [productUpdateBy], references: [userId])

//   productStocks Stock[]
//   productItems  StockItem[]
//   movements     StockMovement[]
// }

// model Stock {
//   stockId        Int       @id @default(autoincrement())
//   stockProductId Int
//   stockBinId     Int
//   stockQty       Int
//   stockLot       String
//   stockExpiry    DateTime?

//   stockProduct Product     @relation(fields: [stockProductId], references: [productId])
//   stockBin     Bin         @relation(fields: [stockBinId], references: [binId])
//   stockItems   StockItem[] @relation("StockToItem")

//   @@unique([stockProductId, stockBinId, stockLot, stockExpiry])
// }

// model StockItem {
//   itemId        Int        @id @default(autoincrement())
//   itemStockId   Int
//   itemProductId Int
//   itemBinId     Int
//   itemRFIDTagId String     @unique
//   itemSerialNo  String?
//   itemLot       String
//   itemExpiry    DateTime?
//   itemStatus    ItemStatus @default(Available)
//   itemCreateAt  DateTime   @default(now()) @db.Timestamp(0)
//   itemUpdateAt  DateTime?  @db.Timestamp(0)

//   itemProduct Product @relation(fields: [itemProductId], references: [productId])
//   itemBin     Bin     @relation(fields: [itemBinId], references: [binId])
//   itemStock   Stock   @relation("StockToItem", fields: [itemStockId], references: [stockId])
// }

// model StockMovement {
//   movementId        Int          @id @default(autoincrement())
//   movementType      MovementType
//   movementProductId Int
//   movementBinId     Int
//   movementQty       Int
//   movementLot       String
//   movementExpiry    DateTime?
//   movementRefNo     String?
//   movementNote      String?
//   movementBy        Int
//   movementAt        DateTime     @default(now()) @db.Timestamp(0)

//   movementProduct Product @relation(fields: [movementProductId], references: [productId])
//   movementBin     Bin     @relation(fields: [movementBinId], references: [binId])
//   movedBy         User    @relation("UserMovedStock", fields: [movementBy], references: [userId])
// }
